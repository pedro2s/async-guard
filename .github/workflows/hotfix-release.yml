name: Hotfix Release

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write

jobs:
  hotfix-release:
    name: Hotfix Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # precisa disso para ver as tags!

      - name: Get commit info
        id: commit_info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get associated PR (if any)
        id: pr
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/commits/${{ steps.commit_info.outputs.sha }}/pulls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR is from hotfix/*
        id: check_hotfix
        run: |
          PR_HEAD_BRANCH=$(echo '${{ steps.pr.outputs.data }}' | jq -r '.[0].head.ref // ""')
          if [[ "$PR_HEAD_BRANCH" == hotfix/* ]]; then
            echo "hotfix_branch=$PR_HEAD_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "Not a hotfix PR, skipping release."
            exit 78
          fi

      - name: Get latest tag
        id: get_tag
        shell: bash
        run: |
          TAGS=$(git tag --list 'v*' --sort=-v:refname)
          LATEST_TAG=$(echo "$TAGS" | awk 'NR==1')
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate next patch version
        id: bump_version
        shell: bash
        run: |
          TAG=${{ steps.get_tag.outputs.latest_tag }}
          if [[ $TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_TAG="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
            echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
          else
            echo "No valid tag found, using v0.0.1"
            echo "next_tag=v0.0.1" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ -z "$LATEST_TAG" ]]; then
            LOG=$(git log --pretty=format:"- %s (%h)" )
          else
            LOG=$(git log "${LATEST_TAG}..HEAD" --pretty=format:"- %s (%h)")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: comnoco/create-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.next_tag }}
          release_name: Release ${{ steps.bump_version.outputs.next_tag }}
          body: |
            ðŸ”¥ Hotfix release from branch `${{ steps.check_hotfix.outputs.hotfix_branch }}`

            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
